apply plugin: 'com.android.library'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    sourceSets {
        main {
            jni.srcDirs = []
        }
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 22

        ndk {
            moduleName "audiostreamer"
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile files('libs/sipuada.jar')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: "$buildDir/libs", include: 'ndk-libs')
    // Adds our jar file containing NDK code (.so files)
    compile files("$buildDir/libs/ndk-libs.jar")
    // Just debug info
    println("$buildDir/libs")
}

// Before compiling our app, prepare NDK code
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkLibsToJar
}

// Packs ndk into JAR
task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
    destinationDir new File(buildDir, 'libs')
    baseName 'ndk-libs'
    extension 'jar'
    from(new File(buildDir, 'libs')) { include '**/*.so' }
    into 'lib/'
}

// Build native code using mk files like on Eclipse
task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
    def ndkDir = project.plugins.findPlugin('com.android.library').sdkHandler.getNdkFolder()
    println(project.plugins.findPlugin('com.android.library').sdkHandler.getNdkFolder())

    commandLine "$ndkDir/ndk-build",
            'NDK_PROJECT_PATH=build',
            'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
            'NDK_APPLICATION_MK=src/main/jni/Application.mk'
}
